{
  "function_v0": {
    "doc": "Returns the allowance for `spender` to transfer from `from`.\\n\\nThe amount returned is the amount that spender is allowed to transfer\\nout of from's balance. When the spender transfers amounts, the allowance\\nwill be reduced by the amount transferred.\\n\\n# Arguments\\n\\n* `from` - The address holding the balance of tokens to be drawn from.\\n* `spender` - The address spending the tokens held by `from`.",
    "name": "allowance",
    "inputs": [
      {
        "doc": "",
        "name": "from",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "spender",
        "type_": "address"
      }
    ],
    "outputs": [
      "i128"
    ]
  }
}{
  "function_v0": {
    "doc": "Returns true if `id` is authorized to use its balance.\\n\\n# Arguments\\n\\n* `id` - The address for which token authorization is being checked.",
    "name": "authorized",
    "inputs": [
      {
        "doc": "",
        "name": "id",
        "type_": "address"
      }
    ],
    "outputs": [
      "bool"
    ]
  }
}{
  "function_v0": {
    "doc": "Set the allowance by `amount` for `spender` to transfer/burn from\\n`from`.\\n\\nThe amount set is the amount that spender is approved to transfer out of\\nfrom's balance. The spender will be allowed to transfer amounts, and\\nwhen an amount is transferred the allowance will be reduced by the\\namount transferred.\\n\\n# Arguments\\n\\n* `from` - The address holding the balance of tokens to be drawn from.\\n* `spender` - The address being authorized to spend the tokens held by\\n`from`.\\n* `amount` - The tokens to be made available to `spender`.\\n* `expiration_ledger` - The ledger number where this allowance expires. Cannot\\nbe less than the current ledger number unless the amount is being set to 0.\\nAn expired entry (where expiration_ledger < the current ledger number)\\nshould be treated as a 0 amount allowance.\\n\\n# Events\\n\\nEmits an event with topics `[\"approve\", from: Address,\\nspender: Address], data = [amount: i128, expiration_ledger: u32]`",
    "name": "approve",
    "inputs": [
      {
        "doc": "",
        "name": "from",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "spender",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "amount",
        "type_": "i128"
      },
      {
        "doc": "",
        "name": "expiration_ledger",
        "type_": "u32"
      }
    ],
    "outputs": []
  }
}{
  "function_v0": {
    "doc": "Returns the balance of `id`.\\n\\n# Arguments\\n\\n* `id` - The address for which a balance is being queried. If the\\naddress has no existing balance, returns 0.",
    "name": "balance",
    "inputs": [
      {
        "doc": "",
        "name": "id",
        "type_": "address"
      }
    ],
    "outputs": [
      "i128"
    ]
  }
}{
  "function_v0": {
    "doc": "Burn `amount` from `from`.\\n\\nReduces from's balance by the amount, without transferring the balance\\nto another holder's balance.\\n\\n# Arguments\\n\\n* `from` - The address holding the balance of tokens which will be\\nburned from.\\n* `amount` - The amount of tokens to be burned.\\n\\n# Events\\n\\nEmits an event with topics `[\"burn\", from: Address], data = amount:\\ni128`",
    "name": "burn",
    "inputs": [
      {
        "doc": "",
        "name": "from",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "amount",
        "type_": "i128"
      }
    ],
    "outputs": []
  }
}{
  "function_v0": {
    "doc": "Burn `amount` from `from`, consuming the allowance of `spender`.\\n\\nReduces from's balance by the amount, without transferring the balance\\nto another holder's balance.\\n\\nThe spender will be allowed to burn the amount from from's balance, if\\nthe amount is less than or equal to the allowance that the spender has\\non the from's balance. The spender's allowance on from's balance will be\\nreduced by the amount.\\n\\n# Arguments\\n\\n* `spender` - The address authorizing the burn, and having its allowance\\nconsumed during the burn.\\n* `from` - The address holding the balance of tokens which will be\\nburned from.\\n* `amount` - The amount of tokens to be burned.\\n\\n# Events\\n\\nEmits an event with topics `[\"burn\", from: Address], data = amount:\\ni128`",
    "name": "burn_from",
    "inputs": [
      {
        "doc": "",
        "name": "spender",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "from",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "amount",
        "type_": "i128"
      }
    ],
    "outputs": []
  }
}{
  "function_v0": {
    "doc": "Clawback `amount` from `from` account. `amount` is burned in the\\nclawback process.\\n\\n# Arguments\\n\\n* `from` - The address holding the balance from which the clawback will\\ntake tokens.\\n* `amount` - The amount of tokens to be clawed back.\\n\\n# Events\\n\\nEmits an event with topics `[\"clawback\", admin: Address, to: Address],\\ndata = amount: i128`",
    "name": "clawback",
    "inputs": [
      {
        "doc": "",
        "name": "from",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "amount",
        "type_": "i128"
      }
    ],
    "outputs": []
  }
}{
  "function_v0": {
    "doc": "Returns the number of decimals used to represent amounts of this token.\\n\\n# Panics\\n\\nIf the contract has not yet been initialized.",
    "name": "decimals",
    "inputs": [],
    "outputs": [
      "u32"
    ]
  }
}{
  "function_v0": {
    "doc": "Mints `amount` to `to`.\\n\\n# Arguments\\n\\n* `to` - The address which will receive the minted tokens.\\n* `amount` - The amount of tokens to be minted.\\n\\n# Events\\n\\nEmits an event with topics `[\"mint\", admin: Address, to: Address], data\\n= amount: i128`",
    "name": "mint",
    "inputs": [
      {
        "doc": "",
        "name": "to",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "amount",
        "type_": "i128"
      }
    ],
    "outputs": []
  }
}{
  "function_v0": {
    "doc": "Returns the name for this token.\\n\\n# Panics\\n\\nIf the contract has not yet been initialized.",
    "name": "name",
    "inputs": [],
    "outputs": [
      "string"
    ]
  }
}{
  "function_v0": {
    "doc": "Sets the administrator to the specified address `new_admin`.\\n\\n# Arguments\\n\\n* `new_admin` - The address which will henceforth be the administrator\\nof this token contract.\\n\\n# Events\\n\\nEmits an event with topics `[\"set_admin\", admin: Address], data =\\n[new_admin: Address]`",
    "name": "set_admin",
    "inputs": [
      {
        "doc": "",
        "name": "new_admin",
        "type_": "address"
      }
    ],
    "outputs": []
  }
}{
  "function_v0": {
    "doc": "Returns the admin of the contract.\\n\\n# Panics\\n\\nIf the admin is not set.",
    "name": "admin",
    "inputs": [],
    "outputs": [
      "address"
    ]
  }
}{
  "function_v0": {
    "doc": "Sets whether the account is authorized to use its balance. If\\n`authorized` is true, `id` should be able to use its balance.\\n\\n# Arguments\\n\\n* `id` - The address being (de-)authorized.\\n* `authorize` - Whether or not `id` can use its balance.\\n\\n# Events\\n\\nEmits an event with topics `[\"set_authorized\", id: Address], data =\\n[authorize: bool]`",
    "name": "set_authorized",
    "inputs": [
      {
        "doc": "",
        "name": "id",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "authorize",
        "type_": "bool"
      }
    ],
    "outputs": []
  }
}{
  "function_v0": {
    "doc": "Returns the symbol for this token.\\n\\n# Panics\\n\\nIf the contract has not yet been initialized.",
    "name": "symbol",
    "inputs": [],
    "outputs": [
      "string"
    ]
  }
}{
  "function_v0": {
    "doc": "Transfer `amount` from `from` to `to`.\\n\\n# Arguments\\n\\n* `from` - The address holding the balance of tokens which will be\\nwithdrawn from.\\n* `to` - The address which will receive the transferred tokens.\\n* `amount` - The amount of tokens to be transferred.\\n\\n# Events\\n\\nEmits an event with topics `[\"transfer\", from: Address, to: Address],\\ndata = amount: i128`",
    "name": "transfer",
    "inputs": [
      {
        "doc": "",
        "name": "from",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "to",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "amount",
        "type_": "i128"
      }
    ],
    "outputs": []
  }
}{
  "function_v0": {
    "doc": "Transfer `amount` from `from` to `to`, consuming the allowance that\\n`spender` has on `from`'s balance. Authorized by spender\\n(`spender.require_auth()`).\\n\\nThe spender will be allowed to transfer the amount from from's balance\\nif the amount is less than or equal to the allowance that the spender\\nhas on the from's balance. The spender's allowance on from's balance\\nwill be reduced by the amount.\\n\\n# Arguments\\n\\n* `spender` - The address authorizing the transfer, and having its\\nallowance consumed during the transfer.\\n* `from` - The address holding the balance of tokens which will be\\nwithdrawn from.\\n* `to` - The address which will receive the transferred tokens.\\n* `amount` - The amount of tokens to be transferred.\\n\\n# Events\\n\\nEmits an event with topics `[\"transfer\", from: Address, to: Address],\\ndata = amount: i128`",
    "name": "transfer_from",
    "inputs": [
      {
        "doc": "",
        "name": "spender",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "from",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "to",
        "type_": "address"
      },
      {
        "doc": "",
        "name": "amount",
        "type_": "i128"
      }
    ],
    "outputs": []
  }
}